% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solmfd_ftns.R
\name{constraint_likelihood}
\alias{constraint_likelihood}
\title{solving constraint likelihood function using the solution manifold.}
\usage{
constraint_likelihood(
  nll,
  C,
  theta,
  s,
  alpha = 0.005,
  gamma = 0.005,
  Lambda = NULL,
  tol1 = 1e-07,
  tol2 = 1e-15,
  num_iter = 1e+05,
  num_iter2 = 20
)
}
\arguments{
\item{nll}{function: negative log-likelihood given data X}

\item{C}{function: constraint function}

\item{theta}{vector: initial parameter}

\item{s}{int: output dim of function C}

\item{alpha}{gradient descent step for nll update}

\item{gamma}{gradient descent step for solution manifold algorithm}

\item{Lambda}{positive definite matrix for solution manifold algorithm. Default is identity}

\item{tol1}{double: convergence threshold for manifold convergence}

\item{tol2}{double: convergence threhold for gradient descent algorithm. Should be smaller than tol1}

\item{num_iter}{maximum number of iterations for gradient descent.}

\item{num_iter2}{number of iteration for all processes.}
}
\value{
theta_traj: matrix containing trajactory of theta updates.
}
\description{
solving constraint likelihood function using the solution manifold.
}
\examples{
# init value
set.seed(10)
# num of samples
n = 100
# data distribution
X = rnorm(n, mean = 1.5, sd = 3)
# negative log likelihood
nll = function(theta) {return(-sum(dnorm(X, theta[[1]], theta[[2]], log = TRUE)))}
# constraint
C = function(x) {return(pnorm(2, x[[1]], x[[2]]) - pnorm(-5, x[[1]], x[[2]]) - 0.5)}
theta = runif(2, 1, 3)
theta_updated = constraint_likelihood(nll, C, theta, 1)
# compare between init and end points.
C(theta_updated[1, ])
C(theta_updated[41, ])
nll(theta_updated[1, ])
nll(theta_updated[41, ])
}
